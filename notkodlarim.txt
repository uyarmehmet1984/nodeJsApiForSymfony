controllers/bookController.js kodları:

// bookController.js
const bookModel = require('../models/bookmodels');

// GET: Tüm kitapları getir
exports.getAllBooks = (req, res) => {
  bookModel.getAllBooks((err, results) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else {
      res.json(results);
    }
  });
};

// GET: Belirli bir kitabı getir
exports.getBookById = (req, res) => {
  const bookId = req.params.id;

  bookModel.getBookById(bookId, (err, result) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else if (!result.length) {
      res.status(404).send('Kitap bulunamadı.');
    } else {
      res.json(result[0]);
    }
  });
};

// POST: Yeni bir kitap ekle
exports.addBook = (req, res) => {
  const newBook = req.body;

  // Veri doğrulama
  if (!newBook.ad || !newBook.yazar || !newBook.sayfa_sayisi || !newBook.isbn || !newBook.sayi) {
    return res.status(400).send('Eksik bilgi, lütfen tüm alanları doldurun.');
  }

  bookModel.addBook(newBook, (err, results) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else {
      res.status(201).send('Kitap başarıyla eklendi. ID: ' + results.insertId);
    }
  });
};

// PUT: Belirli bir kitabı güncelle
exports.updateBook = (req, res) => {
  const bookId = req.params.id;
  const updatedBook = req.body;

  bookModel.updateBook(bookId, updatedBook, (err, results) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else if (results.affectedRows === 0) {
      res.status(404).send('Kitap bulunamadı.');
    } else {
      res.send('Kitap başarıyla güncellendi.');
    }
  });
};

// DELETE: Belirli bir kitabı sil
exports.deleteBook = (req, res) => {
  const bookId = req.params.id;

  bookModel.deleteBook(bookId, (err, results) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else if (results.affectedRows === 0) {
      res.status(404).send('Kitap bulunamadı.');
    } else {
      res.send('Kitap başarıyla silindi.');
    }
  });
};

// GET: Kitapları sayfalı olarak getir
exports.getBooksPaginated = (req, res) => {
  const { page, pageSize, sort, yazar } = req.query;

  // Sayfa numarası ve sayfa boyutunu kontrol et
  const pageNumber = parseInt(page) || 1;
  const pageSizeNumber = parseInt(pageSize) || 3;

  bookModel.getBooksPaginated(pageNumber, pageSizeNumber, sort, yazar, (err, results) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else {
      res.json(results);
    }
  });
};


models/bookmodels.js kodları:  // bookModel.js


const db = require('../db');

// Tüm kitapları getir
exports.getAllBooks = (callback) => {
  const query = 'SELECT * FROM book';
  db.query(query, callback);
};

// Belirli bir kitabı getir
exports.getBookById = (bookId, callback) => {
  const query = 'SELECT * FROM book WHERE id = ?';
  db.query(query, [bookId], callback);
};

// Yeni bir kitap ekle
exports.addBook = (newBook, callback) => {
  const query = 'INSERT INTO book SET ?';
  db.query(query, [newBook], callback);
};

// Belirli bir kitabı güncelle
exports.updateBook = (bookId, updatedBook, callback) => {
  const query = 'UPDATE book SET ? WHERE id = ?';
  db.query(query, [updatedBook, bookId], callback);
};

// Belirli bir kitabı sil
exports.deleteBook = (bookId, callback) => {
  const query = 'DELETE FROM book WHERE id = ?';
  db.query(query, [bookId], callback);
};

// Sayfalı olarak kitapları getir
exports.getBooksPaginated = (page, pageSize, sort, yazar, callback) => {
  const offset = (page - 1) * pageSize;
  let query = 'SELECT * FROM book';

  // Yazar filtresi
  if (yazar) {
    query += ` WHERE yazar = '${yazar}'`;
  }

  // Sıralama
  if (sort) {
    const sortOrder = sort === 'asc' ? 'ASC' : 'DESC';
    query += ` ORDER BY ad ${sortOrder}`;
  }

  query += ' LIMIT ? OFFSET ?';

  db.query(query, [pageSize, offset], callback);
};


routes/book.js kodları:

// routes/book.jscontrollers\bookController.js
const express = require('express');
const router = express.Router();
const bookController = require('../controllers/bookController');

// GET: Tüm kitapları getir
router.get('/books', bookController.getAllBooks);

// GET: Belirli bir kitabı getir
router.get('/books/:id', bookController.getBookById);

// POST: Yeni bir kitap ekle
router.post('/books', bookController.addBook);

// PUT: Belirli bir kitabı güncelle
router.put('/books/:id', bookController.updateBook);

// DELETE: Belirli bir kitabı sil
router.delete('/books/:id', bookController.deleteBook);

// GET: Kitapları sayfalı olarak getir
router.get('/books/paginated', bookController.getBooksPaginated);

module.exports = router;

db.js kodları:

// db.js
const mysql = require('mysql');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '198402',
  database: 'mebotomasyondb'
};

const db = mysql.createConnection(dbConfig);

db.connect((err) => {
  if (err) {
    console.error('MySQL bağlantısı başarısız: ' + err.message);
  } else {
    console.log('MySQL bağlantısı başarılı.');
  }
});

module.exports = db;

index.js kodları:

const express = require('express');
const bodyParser = require('body-parser');
const bookRoutes = require('./routes/book');  // routes/book.js dosyanızın yolu
const db = require('./db');

const app = express();
const port = 100;

// Middleware
app.use(bodyParser.json());

// Rotalar
app.use(bookRoutes);

// Ana sayfa
app.get('/', (req, res) => {
  res.send('Merhaba, Express uygulamasına hoş geldiniz!');
});

// Server'ı başlat
app.listen(port, () => {
  console.log(`Server ${port} portunda çalışıyor.`);
});

Mysql tablosu içeriği
id (PRI, int)  AUTO_INCREMENT
ad (varchar)
yazar (varchar)
sayfa_sayisi (smallint)
sayi (int)
isbn (bigint)




