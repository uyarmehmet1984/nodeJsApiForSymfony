bookController_mongo.js Kodlarım Aşağıda:

// bookController.js
const Book = require('../models/bookmodels_mongo');

// GET: Tüm kitapları getir
exports.getAllBooks = async (req, res) => {
  try {
    const books = await Book.find().exec();
    res.json(books);
  } catch (err) {
    res.status(500).send('Veritabanı hatası: ' + err.message);
  }
};

// GET: Belirli bir kitabı getir
exports.getBookById = (req, res) => {
  const bookId = req.params.id;

  Book.findById(bookId, (err, book) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else if (!book) {
      res.status(404).send('Kitap bulunamadı.');
    } else {
      res.json(book);
    }
  });
};

// POST: Yeni bir kitap ekle
exports.addBook = (req, res) => {
  const newBook = req.body;

  // Veri doğrulama
  if (!newBook.ad || !newBook.yazar || !newBook.sayfa_sayisi || !newBook.isbn || !newBook.sayi) {
    return res.status(400).send('Eksik bilgi, lütfen tüm alanları doldurun.');
  }

  const book = new Book(newBook);
  book.save((err, savedBook) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else {
      res.status(201).send('Kitap başarıyla eklendi. ID: ' + savedBook._id);
    }
  });
};

// PUT: Belirli bir kitabı güncelle
exports.updateBook = (req, res) => {
  const bookId = req.params.id;
  const updatedBook = req.body;

  Book.findByIdAndUpdate(bookId, updatedBook, { new: true }, (err, updatedBook) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else if (!updatedBook) {
      res.status(404).send('Kitap bulunamadı.');
    } else {
      res.send('Kitap başarıyla güncellendi.');
    }
  });
};

// DELETE: Belirli bir kitabı sil
exports.deleteBook = (req, res) => {
  const bookId = req.params.id;

  Book.findByIdAndDelete(bookId, (err, deletedBook) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else if (!deletedBook) {
      res.status(404).send('Kitap bulunamadı.');
    } else {
      res.send('Kitap başarıyla silindi.');
    }
  });
};

// GET: Kitapları sayfalı olarak getir
exports.getBooksPaginated = (req, res) => {
  const { page, pageSize, sort, yazar } = req.query;

  // Sayfa numarası ve sayfa boyutunu kontrol et
  const pageNumber = parseInt(page) || 1;
  const pageSizeNumber = parseInt(pageSize) || 3;

  const options = {
    limit: pageSizeNumber,
    skip: (pageNumber - 1) * pageSizeNumber,
  };

  let query = {};

  // Yazar filtresi
  if (yazar) {
    query.yazar = yazar;
  }

  // Sıralama
  const sortOrder = sort === 'asc' ? 1 : -1;
  options.sort = { ad: sortOrder };

  Book.find(query, null, options, (err, books) => {
    if (err) {
      res.status(500).send('Veritabanı hatası: ' + err.message);
    } else {
      res.json(books);
    }
  });
};


bookmodels_mongo.js kodlarım Aşağıda

// bookmodels.js
const mongoose = require('mongoose');

const bookSchema = new mongoose.Schema({
  ad: {
    type: String,
    required: true,
  },
  yazar: {
    type: String,
    required: true,
  },
  sayfa_sayisi: {
    type: Number,
    required: true,
  },
  isbn: {
    type: String,
    required: true,
    unique: true,
  },
  sayi: {
    type: Number,
    required: true,
  },
});

const Book = mongoose.model('Book', bookSchema);

module.exports = Book;


book_mongo.js kodlarım Aşağıda 
const express = require('express');
const router = express.Router();
const bookController = require('../controllers/bookController_mongo');

// GET: Tüm kitapları getir
router.get('/books', bookController.getAllBooks);

// GET: Belirli bir kitabı getir
router.get('/books/:id', bookController.getBookById);

// POST: Yeni bir kitap ekle
router.post('/books', bookController.addBook);

// PUT: Belirli bir kitabı güncelle
router.put('/books/:id', bookController.updateBook);

// DELETE: Belirli bir kitabı sil
router.delete('/books/:id', bookController.deleteBook);

// GET: Kitapları sayfalı olarak getir
router.get('/books/paginated', bookController.getBooksPaginated);

module.exports = router;


db_mongo.js kodlarım aşağıda:

// // db_mongo.js burası localden 

// const mongoose = require('mongoose');

// mongoose.connect('mongodb://localhost:27017/mebotomasyondb');

// const db = mongoose.connection;

// db.on('error', (err) => {
//   console.error('MongoDB bağlantı hatası:', err.message);
// });

// db.once('open', () => {
//   console.log('MongoDB bağlantısı başarılı.');
// });

// module.exports = db;


//Atlas Bağlantısı


const mongoose = require('mongoose');

// MongoDB Atlas bağlantı dizesi
const atlasConnectionString = 'mongodb+srv://mehmetmeb06:198402@test-pro-db.zcdgzxm.mongodb.net/?retryWrites=true&w=majority';



const db = mongoose.connection;

db.on('error', (err) => {
  console.error('MongoDB bağlantı hatası:', err.message);
});

db.once('open', () => {
  console.log('MongoDB bağlantısı başarılı.');
});

module.exports = db;


index_mongo.js kodlarım aşağıda:
// index.js
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const bookRoutes = require('./routes/book_mongo');
const db = require('./db_mongo');

const app = express();
const port = 4000;

// Middleware
app.use(bodyParser.json());

// MongoDB bağlantısı burası bilgisayardan mongo kullanırken açılacak
// mongoose.connect('mongodb://localhost:27017/mebotomasyondb', {
//   useNewUrlParser: true,
//   useUnifiedTopology: true,
//   useCreateIndex: true,
//   useFindAndModify: false,
// })
//   .then(() => {
//     console.log('MongoDB bağlantısı başarılı.');
//   })
//   .catch((err) => {
//     console.error('MongoDB bağlantısı başarısız: ' + err.message);
  //});

// Rotalar
app.use(bookRoutes);

// Ana sayfa
app.get('/', (req, res) => {
  res.send('Merhaba, Mongooooo Atlas uygulamasına hoş geldiniz!');
});

// Server'ı başlat
app.listen(port, () => {
  console.log(`Server ${port} portunda çalışıyor.`);
});





